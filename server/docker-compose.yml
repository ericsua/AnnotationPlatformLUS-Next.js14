version: "3.8"

secrets:
  username:
    file: ./mongo3/username.txt
  password:
    file: ./mongo3/password.txt

services:
  mongo1:
    image: mongo:7.0
    command: ["--replSet", "rs0", "--bind_ip_all", "--port", "27017"]
    ports:
      - 27017:27017
    extra_hosts:
      - "host.docker.internal:host-gateway"
    environment:
      DB_USERNAME: /run/secrets/username
      DB_PASSWORD: /run/secrets/password
    healthcheck:
      test: echo "try { rs.status(); var adminDB = db.getSiblingDB('admin'); var user='$$(cat /run/secrets/username)'; var pass='$$(cat /run/secrets/password)'; adminDB.createUser({user:user,pwd:pass,roles:[{ role:'root',db:'admin'}]});  } catch (err) { rs.initiate({_id:'rs0',members:[{_id:0,host:'host.docker.internal:27017',priority:1},{_id:1,host:'host.docker.internal:27018',priority:0.5},{_id:2,host:'host.docker.internal:27019',priority:0.5}]}); }" | mongosh --port 27017 --quiet
      interval: 5s
      timeout: 30s
      start_period: 0s
      start_interval: 1s
      retries: 30
    volumes:
      - "./mongo3/data/db:/data/db"
      - "./mongo3/data/configdb:/data/configdb"
    secrets:
      - username
      - password

  mongo2:
    image: mongo:7.0
    command: ["--replSet", "rs0", "--bind_ip_all", "--port", "27018"]
    ports:
      - 27018:27018
    extra_hosts:
      - "host.docker.internal:host-gateway"
    volumes:
      - "./mongo3/data/db2:/data/db"
      - "./mongo3/data/configdb2:/data/configdb"

  mongo3:
    image: mongo:7.0
    command: ["--replSet", "rs0", "--bind_ip_all", "--port", "27019"]
    ports:
      - 27019:27019
    extra_hosts:
      - "host.docker.internal:host-gateway"
    volumes:
      - "./mongo3/data/db3:/data/db"
      - "./mongo3/data/configdb3:/data/configdb"

